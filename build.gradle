plugins {
    id 'org.springframework.boot' version '1.5.9.RELEASE'
}

configurations {
    mybatisGenerator
}

group 'com.enok-b'
version '1.0-SNAPSHOT'

ext {
    springbootVersion = "1.5.10.RELEASE"
    junitVersion = "4.12"
    springfoxVersion="2.7.0"
    fastjsonVersion="1.2.44"
}

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    maven {
        url 'http://repo.spring.io/milestone/'
    }
}

dependencies {
    // Use JUnit test framework
    testCompile("junit:junit:${junitVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springbootVersion}")
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.15.0'

    compile("org.springframework.boot:spring-boot-starter-web:${springbootVersion}")
    compile("org.springframework.boot:spring-boot-starter-aop:${springbootVersion}")

    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.45'

    compile("io.springfox:springfox-swagger2:${springfoxVersion}")
    {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
    }
    compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")

    compile("com.alibaba:fastjson:${fastjsonVersion}")

    compile("org.apache.commons:commons-lang3:3.7")

    compile("commons-codec:commons-codec:1.11")

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.6'
    mybatisGenerator group: 'mysql', name: 'mysql-connector-java', version: '5.1.45'
}

task wrapper(type: Wrapper){
    gradleVersion = '4.4.1'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/generator.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}